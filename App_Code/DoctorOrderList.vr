Using System
Using System.Collections.Generic
Using System.Linq
Using System.Data
Using System.Text 
Using System.Configuration
Using System.Web
Using System.Web.Security
Using System.Web.UI
Using System.Web.UI.WebControls
Using System.Web.UI.WebControls.WebParts
Using System.Web.UI.HtmlControls

/// <summary>
/// Summary description for DoctorOrderList
/// </summary>
BegClass DoctorOrderList Access(*Public)

    DclDB DGDB DBName("*PUBLIC/Cypress")

	DclDiskFile WebTempFile +
		Type(*Input) +
		Org(*Indexed) +
		Prefix(WebTemp_) +
		File("RPMRDATA/WebTemp") +
		DB(DGDB) +
		ImpOpen(*No) 

/*
	Create Table rpmrdata.webtemp (
		Id integer  not null generated always as identity primary key,
		Session VarChar(10),
		CMCustNo integer,
		CMName varchar(40),
		CMCity varChar(30),
		CMState varChar(25), 
		CMActive VarChar(1)
	)
*/

    DclMemoryFile InfoList ImpOpen(*Yes) 
        DclRecordFormat InfoListR
		DclRecordFld    InfoList_Status Type(*Char) Len(1) 
		DclRecordfld    InfoList_AccountID Type(*Char) Len(9)
        DclRecordFld    InfoList_IconClass Type(*Char) Len(128)
        DclRecordFld    InfoList_LineInfo  Type(*Char) Len(512)

	DclFld PageSize Type(*Integer4) 
	DclFld MoreRows Type(*Integer4) 
	DclFld RowsReturned Type(*Integer4) 

    DclFld CustomerName      Type(*String) Access(*Public)         
    DclFld CustomerNumber    Type(*String) Access(*Public) 
	DclFld UniqueUserKey     Type(*String) Access(*Public) 


	BegConstructor Access(*Public)
        //
        // Class constructor. Receives an ASNA Database object and
        // the number of records to read.
        //
        DclSrParm DGDB     Type(ASNA.VisualRPG.Runtime.Database)
        DclSrParm PageSize Type(*Integer4)
		DclFld hasher Type(HashidsNet.Hashids) 
		DclFld Hasheduser Type(*String) 

        *This.DGDB = DGDB
        *This.PageSize = PageSize 
		hasher = *New HashIdsNet.Hashids(DateTime.Now().ToString('ffffff'))
		*This.UniqueUserKey = hasher.Encode(1, 2, 3)
	EndConstructor

    BegSr OpenData 
        If (NOT DGDB.IsOpen)
			DGDB.InitialLibl = *New String[] {'rpmrdata', 'rpdream'}				
            Connect DGDB
        EndIf
        Open WebTempFile
    EndSr

    BegSr CloseData
        Close *All
    EndSr 

    BegFunc PopulateList Type(DataTable) Access(*Public) 
		DclSrParm PageNo Type(*Integer4) 

		LeaveSr PopulateList(PageNo, String.Empty) 									
	EndFunc 
	
    BegFunc PopulateList Type(DataTable) Access(*Public) 
		DclSrParm PageNo Type(*Integer4) 
		DclSrParm Filter Type(*String) 

		DclFld Result Type(CallInfo) 

		OpenData()

		Result = GetWorkList(*This.DGDB, PageNo, *This.PageSize, *This.UniqueUserKey, Filter) 
		*This.MoreRows = Result.MoreRows
		*This.RowsReturned = Result.RowsReturned

		If (Result.RowsReturned = 0)
			LeaveSr *Nothing 
		EndIf
       
	    // If zero then no rows read. 
		LeaveSr GetRows()
    EndFunc 
    
    BegFunc GetRows Type(DataTable)
        DclFld Row Type(*Integer4) 

		DclFld InfoTemplate Type(StringBuilder) New(1024)
		DclFld RowTemplate  Type(StringBuilder) New(1024)

		InfoTemplate.Append('{{order-number}}<br>')
		InfoTemplate.Append('{{customer-number}}-{{customer-name}}<br>')
		InfoTemplate.Append('{{directions}}<br>')
		InfoTemplate.Append('{{product}}')
        
        Do FromVal(1) ToVal(PageSize) Index(Row) 
            Read WebTempFile 
            If (WebTempFile.IsEof) 
                Leave
            EndIf

			// Not likely, but ensure no date for other users lurk. 
			If (WebTemp_Session = *This.UniqueUserKey) 						
				infoList_IconClass = (WebTemp_CMActive = '0') ? +
				   "fas fa-thumbs-down big-icon-red" : +
				   "fas fa-thumbs-up big-icon-green"

				InfoList_AccountId = WebTemp_CMCustNo.ToString('###########')
				InfoList_Status = WebTemp_CMActive

				RowTemplate.Clear()
				RowTemplate.Append(InfoTemplate.ToString())
				RowTemplate.Replace('{{order-number}}', '456675')
				RowTemplate.Replace('{{customer-number}}', WebTemp_CMCustNo.ToString('############'))
				RowTemplate.Replace('{{customer-name}}', WebTemp_CMName.Trim())
				RowTemplate.Replace('{{directions}}', WebTemp_CMCity)
				RowTemplate.Replace('{{product}}', 'Dry Run')

				InfoList_LineInfo = RowTemplate.ToString() 
				Write InfoList 
			EndIf
        EndDo

		DeleteWorkList(*This.DGDB, *This.UniqueUserKey) 

        CustomerNumber = WebTemp_CMCustNo
        CustomerName = WebTemp_CMName 

		CloseData()
        
        LeaveSr InfoList.DataSet.Tables[ 0 ]
    EndFunc 

	BegFunc GetWorkList Type(CallInfo) Access(*Public) 
		DclSrParm DGDB Type(ASNA.VisualRPG.Runtime.Database) 
		DclSrParm PageNo Type(*Integer4) 
		DclSrParm PageSize Type(*Integer4) 
		DclSrParm UniqueUserKey Type(*String) 
		DclSrParm Filter Type(*Char) Len(40) 

		DclFld MoreRows Type(*Integer4) Inz(0)
		DclFld RowsReturned Type(*Integer4)  Inz(0)
		//DclFld Filter Type(*Char) Len(40) Inz(*Blanks) 
		DclFld UserName Type(*Char) Len(10) Inz(UniqueUserKey)

		DclFld Result Type(CallInfo) New()

		Call 'RPDREAM/sqldoc' DB(DGDB) 
		DclParm PageSize 
		DclParm PageNo
		DclParm MoreRows
		DclParm RowsReturned
		DclParm Filter 
		DclParm UserName // CpyFrom(UniqueUserKey) 

 		Result.MoreRows = MoreRows 
		Result.RowsReturned = RowsReturned
		LeaveSr Result
	EndFunc

	BegSr DeleteWorkList Access(*Public) 
		DclSrParm DGDB Type(ASNA.VisualRPG.Runtime.Database) 
		DclSrParm UniqueUserKey Type(*String) 

		DclFld UserKey Type(*Char) Len(10)

		UserKey = UniqueUserKey 
	
		Call 'RPDREAM/dltdoc' DB(DGDB) 
		DclParm UserKey
	EndSr

EndClass

BegClass CallInfo Access(*Public) 
	DclProp MoreRows Type(*Integer4) Access(*Public) 
	DclProp RowsReturned Type(*Integer4) Access(*Public) 
EndClass 
